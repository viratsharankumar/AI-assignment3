# -*- coding: utf-8 -*-
"""AI assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OGsDPF-op58VPI7nQKo1eMvE7AeExhOx
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

fat_data=pd.read_csv('/content/drive/MyDrive/bodyfat.csv')

fat_data.head()

fat_data.isnull().sum()

fat_data.describe()

fat_data.info()

fat_data.columns

sns.pairplot(fat_data)

plt.figure(figsize=(15,15))
sns.heatmap(fat_data.corr(),annot=True)
plt.show()

fat_data.hist(figsize=(15,8),grid=False,color='blue',bins=15)
plt.show()

X=fat_data.drop(["BodyFat"], axis = 1)
y=fat_data.BodyFat

from sklearn.preprocessing import StandardScaler
SC=StandardScaler()
X=SC.fit_transform(X)

from sklearn.ensemble import ExtraTreesRegressor
selection = ExtraTreesRegressor()
selection.fit(X,y)

print(selection.feature_importances_)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

#Different models and accuracy score
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.metrics import confusion_matrix,classification_report,precision_score,recall_score

model = [DecisionTreeRegressor,SVR,RandomForestRegressor,KNeighborsRegressor,AdaBoostRegressor,LinearRegression]

for mod in model:
    reg = mod()
    reg = reg.fit(X_train,y_train)
    print(f"{'-'*70}")
    print(mod , 'accuracy',reg.score(X_test,y_test))

#Random Forest Regression model
rf=RandomForestRegressor()
rf.fit(X_train,y_train)

#intiating the model find Lasso value
from sklearn.linear_model import Lasso
LASSO=Lasso(alpha=0.5)
LASSO.fit(X_train,y_train)

#finding the Ridge value
from sklearn.linear_model import Ridge
RIDGE=Ridge(alpha=0.5)
RIDGE.fit(X_train,y_train)

models=[rf,LASSO,RIDGE]
name=["rf","LASSO","RIDGE"]
for i,model in enumerate(models):
    ac=model.score(X_test,y_test)
    print(f"model => {name[i]}")
    print(ac)

#train score
rf.score(X_train,y_train)

#test score
rf.score(X_test,y_test)

#predicted values
y_pred = rf.predict(X_test)
y_pred

print(' accuracy score:\n', {rf.score(X_test,y_test)})

